// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/iris.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IrisRequest struct {
	Data                 []float32 `protobuf:"fixed32,1,rep,packed,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *IrisRequest) Reset()         { *m = IrisRequest{} }
func (m *IrisRequest) String() string { return proto.CompactTextString(m) }
func (*IrisRequest) ProtoMessage()    {}
func (*IrisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_795a19a3ae72d006, []int{0}
}

func (m *IrisRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IrisRequest.Unmarshal(m, b)
}
func (m *IrisRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IrisRequest.Marshal(b, m, deterministic)
}
func (m *IrisRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IrisRequest.Merge(m, src)
}
func (m *IrisRequest) XXX_Size() int {
	return xxx_messageInfo_IrisRequest.Size(m)
}
func (m *IrisRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IrisRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IrisRequest proto.InternalMessageInfo

func (m *IrisRequest) GetData() []float32 {
	if m != nil {
		return m.Data
	}
	return nil
}

type IrisResponse struct {
	Label                []uint32 `protobuf:"varint,1,rep,packed,name=label,proto3" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IrisResponse) Reset()         { *m = IrisResponse{} }
func (m *IrisResponse) String() string { return proto.CompactTextString(m) }
func (*IrisResponse) ProtoMessage()    {}
func (*IrisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_795a19a3ae72d006, []int{1}
}

func (m *IrisResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IrisResponse.Unmarshal(m, b)
}
func (m *IrisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IrisResponse.Marshal(b, m, deterministic)
}
func (m *IrisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IrisResponse.Merge(m, src)
}
func (m *IrisResponse) XXX_Size() int {
	return xxx_messageInfo_IrisResponse.Size(m)
}
func (m *IrisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IrisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IrisResponse proto.InternalMessageInfo

func (m *IrisResponse) GetLabel() []uint32 {
	if m != nil {
		return m.Label
	}
	return nil
}

func init() {
	proto.RegisterType((*IrisRequest)(nil), "protos.IrisRequest")
	proto.RegisterType((*IrisResponse)(nil), "protos.IrisResponse")
}

func init() { proto.RegisterFile("protos/iris.proto", fileDescriptor_795a19a3ae72d006) }

var fileDescriptor_795a19a3ae72d006 = []byte{
	// 179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0xcf, 0x2c, 0xca, 0x2c, 0xd6, 0x03, 0xb3, 0x85, 0xd8, 0x20, 0x42, 0x52, 0x32,
	0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x89, 0x05, 0x99, 0xfa, 0x89, 0x79, 0x79, 0xf9, 0x25,
	0x89, 0x25, 0x99, 0xf9, 0x79, 0x50, 0x55, 0x4a, 0x8a, 0x5c, 0xdc, 0x9e, 0x45, 0x99, 0xc5, 0x41,
	0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x29, 0x89, 0x25, 0x89, 0x12, 0x8c,
	0x0a, 0xcc, 0x1a, 0x4c, 0x41, 0x60, 0xb6, 0x92, 0x0a, 0x17, 0x0f, 0x44, 0x49, 0x71, 0x41, 0x7e,
	0x5e, 0x71, 0xaa, 0x90, 0x08, 0x17, 0x6b, 0x4e, 0x62, 0x52, 0x6a, 0x0e, 0x58, 0x11, 0x6f, 0x10,
	0x84, 0x63, 0xe4, 0xc7, 0xc5, 0x02, 0x52, 0x25, 0xe4, 0xc6, 0xc5, 0x1e, 0x50, 0x94, 0x9a, 0x92,
	0x99, 0x5c, 0x22, 0x24, 0x0c, 0xb1, 0xa3, 0x58, 0x0f, 0xc9, 0x06, 0x29, 0x11, 0x54, 0x41, 0x88,
	0x99, 0x4a, 0x02, 0x4d, 0x97, 0x9f, 0x4c, 0x66, 0xe2, 0x52, 0x62, 0x05, 0xfb, 0xc0, 0x8a, 0x51,
	0x2b, 0x09, 0xe2, 0x7c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xaf, 0xae, 0xf7, 0xda,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IrisClient is the client API for Iris service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IrisClient interface {
	Predict(ctx context.Context, in *IrisRequest, opts ...grpc.CallOption) (*IrisResponse, error)
}

type irisClient struct {
	cc *grpc.ClientConn
}

func NewIrisClient(cc *grpc.ClientConn) IrisClient {
	return &irisClient{cc}
}

func (c *irisClient) Predict(ctx context.Context, in *IrisRequest, opts ...grpc.CallOption) (*IrisResponse, error) {
	out := new(IrisResponse)
	err := c.cc.Invoke(ctx, "/protos.Iris/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IrisServer is the server API for Iris service.
type IrisServer interface {
	Predict(context.Context, *IrisRequest) (*IrisResponse, error)
}

func RegisterIrisServer(s *grpc.Server, srv IrisServer) {
	s.RegisterService(&_Iris_serviceDesc, srv)
}

func _Iris_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IrisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IrisServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Iris/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IrisServer).Predict(ctx, req.(*IrisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Iris_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Iris",
	HandlerType: (*IrisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _Iris_Predict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/iris.proto",
}
